{"version":3,"file":"app.js","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/main.js","webpack://[name]/./src/prefabs/Prefab.js","webpack://[name]/./src/prefabs/TextPrefab.js","webpack://[name]/./src/scenes/BootScene.js","webpack://[name]/./src/scenes/JSONLevelScene.js","webpack://[name]/./src/scenes/LoadingScene.js","webpack://[name]/./src/scenes/TitleScene.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"app\"] = factory();\n\telse\n\t\troot[\"app\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dev/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import TitleScene from './scenes/TitleScene';\nimport BootScene from './scenes/BootScene';\nimport LoadingScene from './scenes/LoadingScene';\nlet titleScene = new TitleScene();\nlet bootScene = new BootScene();\nlet loadingScene = new LoadingScene();\nlet config = {\n  type: Phaser.AUTO,\n  width: 640,\n  height: 360\n};\nlet game = new Phaser.Game(config);\ngame.scene.add('TitleScene', titleScene);\ngame.scene.add('BootScene', bootScene);\ngame.scene.add('LoadingScene', loadingScene);\ngame.scene.start('BootScene', {\n  scene: 'title'\n});","class Prefab extends Phaser.GameObjects.Sprite {\n  constructor(scene, name, position, properties) {\n    super(scene, position.x, position.y, properties.texture, properties.frame);\n    this.scene = scene;\n    this.name = name;\n    this.scene.add.existing(this);\n    this.scene.groups[properties.group].add(this);\n\n    if (properties.scale) {\n      this.setScale(properties.scale.x, properties.scale.y);\n    }\n\n    if (properties.anchor) {\n      this.setOrigin(properties.anchor.x, properties.anchor.y);\n    }\n\n    this.scene.sprites[name] = this;\n  }\n\n}\n\nexport default Prefab;","class TextPrefab extends Phaser.GameObjects.Text {\n  constructor(scene, name, position, properties) {\n    super(scene, position.x, position.y, properties.text, properties.style);\n    this.scene = scene;\n    this.name = name;\n    this.scene.add.existing(this);\n    this.scene.groups[properties.group].add(this);\n\n    if (properties.scale) {\n      this.setScale(properties.scale.x, properties.scale.y);\n    }\n\n    if (properties.anchor) {\n      this.setOrigin(properties.anchor.x, properties.anchor.y);\n    }\n\n    this.scene.sprites[name] = this;\n  }\n\n}\n\nexport default TextPrefab;","class BootScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'BootScene'\n    });\n    this.maps = {\n      title: {\n        key: 'TitleScene',\n        path: 'assets/screens/title_screen.json'\n      }\n    };\n  }\n\n  preload() {\n    for (let map_name in this.maps) {\n      let map = this.maps[map_name];\n      this.load.json(map_name, map.path);\n    }\n  }\n\n  create(data) {\n    let map_data = this.cache.json.get(data.scene); // loading scene expects map data, which comes from the .json file\n\n    this.scene.start('LoadingScene', {\n      map_data: map_data\n    });\n  }\n\n}\n\nexport default BootScene;","import Prefab from '../prefabs/Prefab';\nimport TextPrefab from '../prefabs/TextPrefab';\n\nclass JSONLevelScene extends Phaser.Scene {\n  constructor(key) {\n    super({\n      key: key\n    });\n  }\n\n  init(data) {\n    this.map_data = data.map_data;\n  } // creating prefabs\n\n\n  create() {\n    this.groups = {};\n    this.map_data.groups.forEach(function (group_name) {\n      this.groups[group_name] = this.add.group();\n    }, this);\n    this.sprites = {};\n\n    for (let sprite_name in this.map_data.sprites) {\n      let sprite_data = this.map_data.sprites[sprite_name];\n      let sprite = new this.prefab_classes[sprite_data.type](this, sprite_name, sprite_data.position, sprite_data.properties);\n      console.log(sprite_data);\n    }\n  }\n\n}\n\nexport default JSONLevelScene;","class LoadingScene extends Phaser.Scene {\n  constructor() {\n    super({\n      key: 'LoadingScene'\n    });\n  }\n\n  init(data) {\n    this.map_data = data.map_data;\n    let loading_message = this.add.text(320, 240, \"LOADING\", {\n      font: \"48px Courier\",\n      fill: \"#FF0000\"\n    });\n    console.log(loading_message);\n  }\n\n  preload() {\n    let assets = this.map_data.assets;\n\n    for (let asset_key in assets) {\n      let asset = assets[asset_key];\n\n      switch (asset.type) {\n        case 'image':\n          this.load.image(asset_key, asset.source);\n          break;\n\n        case 'spritesheet':\n          this.load.spritesheet(asset_key, asset.source, {\n            frameWidth: asset.frame_width,\n            frameHeight: asset.frame_height,\n            frames: asset.frames,\n            margin: asset.margin,\n            spacing: asset.spacing\n          });\n      }\n    }\n  }\n\n  create() {\n    this.scene.start('TitleScene', {\n      map_data: this.map_data\n    });\n  }\n\n}\n\nexport default LoadingScene;","import JSONLevelScene from './JSONLevelScene';\nimport Prefab from '../prefabs/Prefab';\nimport TextPrefab from '../prefabs/TextPrefab';\n\nclass TitleScene extends JSONLevelScene {\n  constructor() {\n    super('TitleScene'); // prefab classes\n\n    this.prefab_classes = {\n      background: Prefab.prototype.constructor,\n      text: TextPrefab.prototype.constructor\n    };\n  }\n\n}\n\nexport default TitleScene;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}